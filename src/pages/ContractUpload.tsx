import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  Upload, 
  FileText, 
  CheckCircle, 
  AlertCircle, 
  User, 
  DollarSign,
  Calendar,
  Download,
  Trash2,
  Eye
} from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { useSupabaseAuth } from '../context/SupabaseAuthContext';

interface ContractUploadData {
  loanApplication: any;
  client: any;
  contractStatus: string;
  uploadedFile?: {
    name: string;
    url: string;
    uploadedAt: string;
  };
}

const ContractUpload: React.FC = () => {
  const { loanId } = useParams<{ loanId: string }>();
  const navigate = useNavigate();
  const { user } = useSupabaseAuth();
  const [uploadData, setUploadData] = useState<ContractUploadData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [dragActive, setDragActive] = useState(false);

  useEffect(() => {
    if (loanId) {
      loadUploadData();
    }
  }, [loanId]);

  const loadUploadData = async () => {
    try {
      setLoading(true);
      setError(null);

      // First, try to fetch the loan application by ID (UUID format)
      let { data: loanApplication, error: loanError } = await supabase
        .from('loan_applications')
        .select('*')
        .eq('id', loanId)
        .single();

      // If not found by UUID, try to find by application_id (LA- format)
      if (loanError && loanId.startsWith('LA-')) {
        const { data: loanByAppId, error: loanErrorByAppId } = await supabase
          .from('loan_applications')
          .select('*')
          .eq('application_id', loanId)
          .single();
        
        if (loanByAppId && !loanErrorByAppId) {
          loanApplication = loanByAppId;
          loanError = loanErrorByAppId;
        }
      }

      if (loanError) {
        throw new Error(`Failed to load loan application: ${loanError.message}`);
      }

      if (!loanApplication) {
        throw new Error('Loan application not found');
      }

      // Then fetch the client data separately
      const { data: client, error: clientError } = await supabase
        .from('clients')
        .select('*')
        .eq('id', loanApplication.client_id)
        .single();

      if (clientError) {
        console.warn('Failed to load client data:', clientError.message);
      }

      // Combine the data
      const combinedData = {
        ...loanApplication,
        clients: client || {
          id: loanApplication.client_id,
          full_name: 'Unknown Client',
          phone_number: 'Not provided',
          address: 'Not provided'
        }
      };

      // Check if contract has been generated by looking in the contracts table
      let contractStatus = 'not_generated';
      
      // First check the loan_contracts table using the loan application's UUID (most reliable source)
      console.log('🔍 ContractUpload - Checking contract status for loan:', loanId);
      console.log('🔍 Loan application ID (UUID):', loanApplication.id);
      console.log('🔍 Loan application data:', loanApplication);
      
      let { data: contractData, error: contractError } = await supabase
        .from('loan_contracts')
        .select('status, id, created_at, loan_application_id')
        .eq('loan_application_id', loanApplication.id) // Use the UUID from the database
        .single();
      
      console.log('🔍 Contract query result:', { contractData, contractError });
      
      if (contractData && !contractError) {
        contractStatus = contractData.status;
        console.log('✅ Using contracts table status:', contractStatus);
      } else {
        console.log('❌ No contract found in contracts table, error:', contractError);
        // Fallback to loan application's contract_status
        if (combinedData.contract_status && combinedData.contract_status !== 'not_generated') {
          contractStatus = combinedData.contract_status;
          console.log('✅ Using loan application contract_status as fallback:', contractStatus);
        } else {
          console.log('❌ No contract status found anywhere, using default:', contractStatus);
        }
      }
      
      // Normalize contract status - treat 'generated' and similar statuses as generated
      if (contractStatus === 'generated' || contractStatus === 'created' || contractStatus === 'draft') {
        contractStatus = 'generated';
      }
      
      // Check for existing uploaded contract
      let uploadedFile = null;
      if (contractStatus === 'uploaded' || contractStatus === 'signed') {
        // In a real implementation, you would fetch the actual file info
        uploadedFile = {
          name: 'signed_contract.pdf',
          url: '#', // This would be the actual file URL
          uploadedAt: new Date().toISOString()
        };
      }

      setUploadData({
        loanApplication: combinedData,
        client: combinedData.clients,
        contractStatus,
        uploadedFile
      });

    } catch (err) {
      console.error('Error loading upload data:', err);
      setError(err instanceof Error ? err.message : 'Failed to load upload data');
    } finally {
      setLoading(false);
    }
  };

  const handleFileSelect = (file: File) => {
    // Validate file
    if (!file.type.includes('pdf') && !file.type.includes('image')) {
      alert('Please select a PDF or image file');
      return;
    }

    if (file.size > 10 * 1024 * 1024) { // 10MB limit
      alert('File size must be less than 10MB');
      return;
    }

    setSelectedFile(file);
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile || !uploadData || !user) return;

    setIsUploading(true);
    setUploadProgress(0);
    setError(null);

    try {
      // Create file path
      const fileExt = selectedFile.name.split('.').pop();
      const fileName = `contracts/${uploadData.loanApplication.id}/signed_contract.${fileExt}`;
      
      // Upload file to Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('contracts')
        .upload(fileName, selectedFile, {
          cacheControl: '3600',
          upsert: true
        });

      if (uploadError) {
        throw new Error(`Upload failed: ${uploadError.message}`);
      }

      // Simulate progress
      for (let i = 0; i <= 100; i += 10) {
        setUploadProgress(i);
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      // Update loan application status
      const { error: updateError } = await supabase
        .from('loan_applications')
        .update({
          status: 'approved',
          contract_status: 'signed_by_client',
          contract_file_path: uploadData.path,
          updated_at: new Date().toISOString()
        })
        .eq('id', loanId);

      if (updateError) {
        throw new Error(`Failed to update loan status: ${updateError.message}`);
      }

      alert('Contract uploaded successfully! Loan has been moved to disbursement queue.');
      navigate('/staff/loan-processing');

    } catch (err) {
      console.error('Error uploading contract:', err);
      setError(err instanceof Error ? err.message : 'Failed to upload contract');
    } finally {
      setIsUploading(false);
      setUploadProgress(0);
    }
  };

  const handleDownloadTemplate = () => {
    // In a real implementation, this would download the contract template
    alert('Contract template download would start here');
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'signed': return 'text-green-600 bg-green-100';
      case 'uploaded': return 'text-blue-600 bg-blue-100';
      case 'generated': return 'text-yellow-600 bg-yellow-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading contract upload data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error Loading Data</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => navigate('/staff/loan-processing')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Loan Processing
          </button>
        </div>
      </div>
    );
  }

  if (!uploadData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">No Upload Data</h2>
          <p className="text-gray-600 mb-4">Unable to load upload data for this loan.</p>
          <button
            onClick={() => navigate('/staff/loan-processing')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Loan Processing
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <button
                onClick={() => navigate('/staff/loan-processing')}
                className="flex items-center text-gray-600 hover:text-gray-900 mr-4"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                Back to Loan Processing
              </button>
              <div className="flex items-center">
                <Upload className="w-8 h-8 text-orange-600 mr-3" />
                <div>
                  <h1 className="text-xl font-semibold text-gray-900">Contract Upload</h1>
                  <p className="text-sm text-gray-600">App ID: {uploadData?.loanApplication?.application_id || loanId}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-6">
          {/* Client Information */}
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <User className="w-5 h-5 mr-2 text-blue-600" />
              Client Information
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700">Client Name</label>
                <p className="text-gray-900">{uploadData.client.full_name}</p>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Phone Number</label>
                <p className="text-gray-900">{uploadData.client.phone_number}</p>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Loan Amount</label>
                <p className="text-gray-900">
                  TSh {uploadData.loanApplication.requested_amount?.toLocaleString()}
                </p>
              </div>
              
              <div>
                <label className="text-sm font-medium text-gray-700">Contract Status</label>
                <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(uploadData.contractStatus)}`}>
                  {uploadData.contractStatus.replace('_', ' ').toUpperCase()}
                </span>
              </div>
            </div>
          </div>

          {/* Contract Status */}
          {uploadData.contractStatus === 'not_generated' && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
              <div className="flex items-center">
                <AlertCircle className="w-6 h-6 text-yellow-600 mr-3" />
                <div>
                  <h3 className="text-lg font-semibold text-yellow-800">Contract Not Generated</h3>
                  <p className="text-yellow-700">
                    Please generate the contract first before uploading the signed version.
                  </p>
                  <button
                    onClick={() => navigate(`/staff/loan-contract-generation/${loanId}`)}
                    className="mt-3 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors"
                  >
                    Generate Contract
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Upload Section */}
          {uploadData.contractStatus === 'generated' && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <FileText className="w-5 h-5 mr-2 text-green-600" />
                Upload Signed Contract
              </h3>
              
              <div className="space-y-4">
                {/* Download Template Button */}
                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center">
                    <Download className="w-5 h-5 text-blue-600 mr-2" />
                    <span className="text-gray-700">Download contract template for client signature</span>
                  </div>
                  <button
                    onClick={handleDownloadTemplate}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Download Template
                  </button>
                </div>

                {/* Upload Area */}
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                    dragActive 
                      ? 'border-blue-400 bg-blue-50' 
                      : 'border-gray-300 hover:border-gray-400'
                  }`}
                  onDragEnter={handleDrag}
                  onDragLeave={handleDrag}
                  onDragOver={handleDrag}
                  onDrop={handleDrop}
                >
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  
                  {selectedFile ? (
                    <div className="space-y-2">
                      <p className="text-lg font-medium text-gray-900">{selectedFile.name}</p>
                      <p className="text-sm text-gray-500">
                        {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                      </p>
                      <button
                        onClick={() => setSelectedFile(null)}
                        className="text-red-600 hover:text-red-800 text-sm"
                      >
                        Remove file
                      </button>
                    </div>
                  ) : (
                    <div>
                      <p className="text-lg font-medium text-gray-900 mb-2">
                        Drop your signed contract here
                      </p>
                      <p className="text-gray-500 mb-4">
                        or click to browse files
                      </p>
                      <input
                        type="file"
                        accept=".pdf,.jpg,.jpeg,.png"
                        onChange={handleFileInputChange}
                        className="hidden"
                        id="file-upload"
                      />
                      <label
                        htmlFor="file-upload"
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors cursor-pointer"
                      >
                        Choose File
                      </label>
                    </div>
                  )}
                </div>

                {/* Upload Progress */}
                {isUploading && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Uploading...</span>
                      <span className="text-gray-900">{uploadProgress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${uploadProgress}%` }}
                      ></div>
                    </div>
                  </div>
                )}

                {/* Upload Button */}
                {selectedFile && !isUploading && (
                  <button
                    onClick={handleUpload}
                    className="w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium flex items-center justify-center"
                  >
                    <Upload className="w-5 h-5 mr-2" />
                    Upload Signed Contract
                  </button>
                )}
              </div>
            </div>
          )}

          {/* Already Uploaded */}
          {uploadData.uploadedFile && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3" />
                  <div>
                    <h3 className="text-lg font-semibold text-green-800">Contract Already Uploaded</h3>
                    <p className="text-green-700">
                      File: {uploadData.uploadedFile.name}
                    </p>
                    <p className="text-sm text-green-600">
                      Uploaded: {new Date(uploadData.uploadedFile.uploadedAt).toLocaleString()}
                    </p>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <button className="p-2 text-green-600 hover:text-green-800">
                    <Eye className="w-5 h-5" />
                  </button>
                  <button className="p-2 text-green-600 hover:text-green-800">
                    <Download className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Error Display */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex items-center">
                <AlertCircle className="w-5 h-5 text-red-600 mr-2" />
                <span className="text-red-800">{error}</span>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ContractUpload;
